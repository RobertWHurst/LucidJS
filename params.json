{"name":"LucidJS","tagline":"LucidJS is a chainable event emitter library. It offers several unique features such as set events, emitter piping, DOM node encapsulation, sub events, along with the usual event triggering and binding. LucidJS emitters also feature meta events that allow listening for event binding and event triggering.","body":"# LucidJS\r\n\r\n[![Build Status](https://travis-ci.org/RobertWHurst/lucidJS.png?branch=master)](https://travis-ci.org/RobertWHurst/LucidJS)\r\n[![NPM version](https://badge.fury.io/js/lucidjs.png)](http://badge.fury.io/js/lucidjs)\r\n[![Endorse](http://api.coderwall.com/robertwhurst/endorsecount.png)](http://coderwall.com/robertwhurst)\r\n[![Flattr This](http://api.flattr.com/button/flattr-badge-large.png)](http://flattr.com/thing/1270541/RobertWHurstLucidJS-on-GitHub)\r\n\r\n__NOTE:__ This is release marks a very large\r\nchange to LucidJS, becoming fully prototypal,\r\naswell as matching node's EventEmitter api. Don't\r\nworry, all of the functionallity of the 2.x.x\r\nreleases can be found in this release aswell. The\r\nbenifits of this release is that the emitter can\r\nnow be inherited from, and you can use it in\r\nprojects that currently use node's emitter by\r\nsimply changing your require statement.\r\n\r\n\r\n##Decouple components, make them lucid.\r\n\r\nLucidJS is an event emitter library offering\r\nseveral unique features such as set events,\r\nemitter piping, sub events, along with the \r\nusual event triggering and binding. LucidJS \r\nemitters also feature meta events that  allow \r\nlistening for event binding and event  triggering.\r\n\r\nIt works with AMD loaders, on NodeJS, and with\r\nthe good old script tag.\r\n\r\n\r\n###Set Events\r\n\r\nLucidJS emitters have a method called `.set()`.\r\nSet allows you to bind to an event even after it\r\nhas happened.\r\n```javascript\r\nvar emitter = new lucidJS.EventEmitter();\r\nemitter.flag('ready');\r\nconsole.log('fired ready event');\r\nsetTimeout(function() {\r\n  emitter.bind('ready', function() {\r\n    console.log('listener bound and executed after ready event');\r\n  });\r\n}, 2000);\r\n\r\n>>> fired ready event\r\n>>> listener bound and executed after ready event\r\n```\r\nSet is extremely useful for events that only happen\r\nonce and indicate state. Its the perfect solution\r\nfor `load`, `complete` or `ready` events.\r\n\r\n\r\n###Emitter Piping\r\n\r\nSometimes its nice to have a collection of emitters\r\nand a central emitter to aggregate them. This is\r\npossible with LucidJS emitters.\r\n```javascript\r\nvar centralEmitter = new lucidJS.EventEmitter();\r\nvar emitterA = new lucidJS.EventEmitter();\r\nvar emitterB = new lucidJS.EventEmitter();\r\nvar emitterC = new lucidJS.EventEmitter();\r\n\r\n//pipe the foo event from emitter A\r\nemitterA.pipe('foo', centralEmitter);\r\n\r\n//pipe the bar and baz event from emitter B\r\nemitterB.pipe(['bar', 'baz'], centralEmitter);\r\n\r\n//pipe all events from emitter C\r\nemitterC.pipe(centralEmitter);\r\n```\r\n\r\n\r\n###Sub Events\r\n\r\nEver wish you could have events with sub events? \r\nLucidJS makes this possible. Trigger an event called\r\n`foo.bar.baz` will trigger `foo.bar.baz`, `foo.bar`,\r\nand `foo`.\r\n```javascript\r\nvar emitter = new lucidJS.EventEmitter();\r\nemitter.bind('foo.bar', function() {\r\n  console.log('foo.bar');\r\n});\r\nemitter.bind('foo', function() {\r\n  console.log('foo');\r\n});\r\nemitter.emit('foo.bar.baz');\r\n\r\n>>> 'foo.bar'\r\n>>> 'foo'\r\n```\r\n\r\n\r\n###Simple Events\r\n\r\nAlong with all the tasty bits above LucidJS\r\nemitters are also very good at good old regular\r\nevent passing.\r\n```javascript\r\nvar emitter = new lucidJS.EventEmitter();\r\nemitter.bind('foo', function(arg1, arg2, arg3, arg4, arg5, arg6, arg7) {\r\n  console.log([arg1, arg2, arg3, arg4, arg5, arg6, arg7].join(' '));\r\n});\r\nemitter.emit('foo', 'any', 'number', 'of', 'arguments', 'can', 'be', 'passed');\r\n\r\n>>> 'any number of arguments can be passed'\r\n```\r\n\r\n\r\n###Meta Events\r\n\r\nLucidJS each emitter also emits a set of meta\r\nevents that let you listen for new listeners on\r\nan emitter.\r\n```javascript\r\nvar emitter = new lucidJS.EventEmitter();\r\nemitter.bind('emitter.listener', function(listener) {\r\n  console.log('captured listener', listener, 'on event ' + this.event);\r\n});\r\nemitter.bind('foo', function() { console.log('bar'); });\r\n\r\n>>> 'captured listeners' function() { console.log('bar'); } 'on event foo'\r\n```\r\n\r\nYou can event listen to all of the events emitted \r\nby an emitter.\r\n```javascript\r\nvar emitter = new lucidJS.EventEmitter();\r\nemitter.bind('emitter.event', function(event) {\r\n  console.log('captured event ' + event);\r\n});\r\nemitter.emit('foo');\r\n\r\n>>> 'captured event foo'\r\n```\r\n\r\n\r\n### Class: lucidJS.EventEmitter\r\n\r\n```\r\nvar eventEmitter = new lucidJS.EventEmitter();\r\n```\r\nEventEmitter is a drop in replacement for node's\r\nevent emitter. An event emitter can be created by\r\nsimply using the `new` keyword.\r\n\r\n\r\n### eventEmitter.bind(event, listener)\r\n\r\nTo bind to an event you can use `bind()`, or its\r\naliases `addListener()` and `addListener()`.\r\nIt accepts two arguments; An event, or array\r\nof events, and a callback, or an array of\r\ncallbacks. Listeners are always triggered in the\r\norder they are registered. The eventEmitter is\r\nreturned.\r\n\r\n#### Aliases\r\n\r\n- eventEmitter.addListener\r\n- eventEmitter.on\r\n\r\n#### Arguments\r\n\r\n```\r\neventEmitter.bind(String event, Function listener([arg[, arg[, ...]])) => EventEmitter eventEmitter\r\neventEmitter.bind(Array events, Function listener([arg[, arg[, ...]])) => EventEmitter eventEmitter\r\neventEmitter.bind(String event, Array listeners) => EventEmitter eventEmitter\r\neventEmitter.bind(Array events, Array listeners) => EventEmitter eventEmitter\r\n```\r\n\r\nArgument Name | Allowed Types | Description\r\n--- | --- | ---\r\nevent | String | An event name to bind too.\r\nlistener | String | A function to call when the event(s) are dispatched.\r\nevents | Array | An array of event names to bind to.\r\nlisteners | Array | An array of functions to call when the event(s) are dispatched.\r\n\r\n\r\n### eventEmitter.weakBind(event, listener)\r\n\r\nSimilar to `bind()`, `weakBind()` binds a listener\r\nto an event, however, `weakBind()` automatically\r\nunbinds its listener after its event is fired just\r\nonce. Listeners are always triggered in the order\r\nthey are registered. The eventEmitter is returned.\r\n\r\n#### Aliases\r\n\r\n- eventEmitter.once\r\n\r\n#### Arguments\r\n\r\n```\r\neventEmitter.weakBind(String event, Function listener([arg[, arg[, ...]])) => EventEmitter eventEmitter\r\neventEmitter.weakBind(Array events, Function listener([arg[, arg[, ...]])) => EventEmitter eventEmitter\r\neventEmitter.weakBind(String event, Array listeners) => EventEmitter eventEmitter\r\neventEmitter.weakBind(Array events, Array listeners) => EventEmitter eventEmitter\r\n```\r\n\r\nArgument Name | Allowed Types | Description\r\n--- | --- | ---\r\nevent | String | An event name to bind too.\r\nlistener | String | A function to call when the event(s) are dispatched.\r\nevents | Array | An array of event names to listen for.\r\nlisteners | Array | An array of functions to call when the event(s) are dispatched.\r\n\r\n\r\n### eventEmitter.unbind(event, listener)\r\n\r\nUnbinds a listener, or an array of listeners from\r\nan event, or events. Once a listener is unbound\r\nfrom an event, it will no longer fire when the\r\nevent is dispatched. The eventEmitter is\r\nreturned.\r\n\r\n#### Aliases\r\n\r\n- eventEmitter.removeListener\r\n- eventEmitter.off\r\n\r\n#### Arguments\r\n\r\n```\r\neventEmitter.unbind(String event, Function listener([arg[, arg[, ...]])) => EventEmitter eventEmitter\r\neventEmitter.unbind(Array events, Function listener([arg[, arg[, ...]])) => EventEmitter eventEmitter\r\neventEmitter.unbind(String event, Array listeners) => EventEmitter eventEmitter\r\neventEmitter.unbind(Array events, Array listeners) => EventEmitter eventEmitter\r\n```\r\n\r\nArgument Name | Allowed Types | Description\r\n--- | --- | ---\r\nevent | String | An event the listener is bound to.\r\nlistener | String | A listener to unbind from the event.\r\nevents | Array | An array of events the listener is bound to.\r\nlisteners | Array | An array of functions to unbind from the event.\r\n\r\n\r\n### eventEmitter.emit(event, [arg[, arg[, ...]]])\r\n\r\nDispatching events is done with `emit()`, or its\r\nalias `trigger()`. Any listeners bound to the\r\nevent passed will be triggered immediately. Any\r\nadditional arguments are passed to the listeners.\r\nListeners are always triggered in the order they\r\nare registered. The eventEmitter is returned.\r\n\r\n#### Aliases\r\n\r\n- eventEmitter.trigger\r\n\r\n#### Arguments\r\n\r\n```\r\neventEmitter.emit(String event, [* arg[, * arg[, ...]]]) => EventEmitter eventEmitter\r\neventEmitter.emit(Array events, [* arg[, * arg[, ...]]]) => EventEmitter eventEmitter\r\n```\r\n\r\nArgument Name | Allowed Types | Description\r\n--- | --- | ---\r\nevent | String | An event to trigger.\r\nevents | Array | An array of events to trigger.\r\narg | * | Any argument to be passed to all bound event listeners.\r\n\r\n\r\n### eventEmitter.flag(event, [arg[, arg[, ...]]])\r\n\r\nFlags an event on an emitter. A setting a flag\r\nwill immediately trigger any event listeners bound\r\nprior to calling `flag`. Any listeners bound after\r\nthe flag is set will be triggered immediately\r\nafter they are bound. Any additional arguments are\r\npassed to the listeners. The eventEmitter is\r\nreturned.\r\n\r\n#### Arguments\r\n\r\n```\r\neventEmitter.flag(String event, [* arg[, * arg[, ...]]]) => EventEmitter eventEmitter\r\neventEmitter.flag(Array events, [* arg[, * arg[, ...]]]) => EventEmitter eventEmitter\r\n```\r\n\r\nArgument Name | Allowed Types | Description\r\n--- | --- | ---\r\nevent | String | An event the flag is bound to.\r\nevents | Array | An array of events the flag is bound to.\r\narg | * | Any argument to be passed to bound or future listeners.\r\n\r\n\r\n### eventEmitter.unflag(event)\r\n\r\n#### Arguments\r\n\r\nArgument Name | Allowed Types | Description\r\n--- | --- | ---\r\n\r\n\r\n### eventEmitter.pipe([event], eventEmitter)\r\n\r\n#### Arguments\r\n\r\nArgument Name | Allowed Types | Description\r\n--- | --- | ---\r\n\r\n\r\n### eventEmitter.unpipe([event], eventEmitter)\r\n\r\n#### Arguments\r\n\r\nArgument Name | Allowed Types | Description\r\n--- | --- | ---\r\n\r\n\r\n### eventEmitter.listeners([event])\r\n\r\n#### Arguments\r\n\r\nArgument Name | Allowed Types | Description\r\n--- | --- | ---\r\n\r\n\r\n### eventEmitter.unbindAll([event])\r\n\r\n#### Aliases\r\n\r\n- eventEmitter.removeAllListeners\r\n\r\n#### Arguments\r\n\r\nArgument Name | Allowed Types | Description\r\n--- | --- | ---\r\n\r\n\r\n\r\n## A Foot Note\r\n\r\nIf you like my library feel free to use it however you want. If you wish to contribute to LucidJS please feel free to send me a pull request or make your own fork. Commentary is welcome on any of my projects.\r\n\r\nCheers and happy coding.\r\n\r\n","google":"UA-8963518-4","note":"Don't delete this file! It's used internally to help with page regeneration."}